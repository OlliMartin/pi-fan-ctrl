@using System.Globalization
@using PiFanCtrl.Services
@using PiFanCtrl.Services.Stores
@inject FanSpeedCalculator calculator
@inject SlidingReadingStore readingStore

<LineChart @ref="lineChart" Style="min-height: 400px" Height="100" HeightUnit="Unit.Percentage" Width="100"
           WidthUnit="Unit.Percentage"/>

@code {
    private const decimal GRAPH_X_START = 15m;
    private const decimal GRAPH_X_END = 120m;
    private const decimal GRAPH_Y_START = 0m;
    private const decimal GRAPH_Y_END = 100m;
    private const decimal GRAPH_RESOLUTION = 0.1m;

    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    private List<string> labels = MakeBaseGraph().Select(num => num).Select(val => val.ToString(CultureInfo.InvariantCulture)).ToList();

    private static IEnumerable<decimal> MakeBaseGraph()
    {
        decimal curr = GRAPH_X_START;

        while (curr <= GRAPH_X_END)
        {
            yield return curr;
            curr += GRAPH_RESOLUTION;
        }
    }

    protected async override Task OnInitializedAsync()
    {
        List<IChartDataset> datasets = GenerateDataSets();
        chartData = GenerateChartData(datasets);

        lineChartOptions = new();
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new() { Mode = InteractionMode.Index, };
        lineChartOptions.MaintainAspectRatio = false;

        lineChartOptions.Scales.X!.Title = new() { Text = "Temperature", Display = true, };
        lineChartOptions.Scales.Y!.Title = new() { Text = "Fan Speed (%)", Display = true, };

        lineChartOptions.Plugins.Title!.Text = "Temperature to Speed Mapping";
        lineChartOptions.Plugins.Title.Display = true;
    }

    private ChartData GenerateChartData(List<IChartDataset> datasets) => new() { Labels = labels, Datasets = datasets, };

    private List<IChartDataset> GenerateDataSets()
    {
        string[] colors = ColorUtility.CategoricalTwelveColors;

        List<IChartDataset> datasets = new();

        LineChartDataset dataset1 = new()
        {
            Label = "Fan Speed (%)",
            Data = MakeBaseGraph().Select(i => calculator.CalculateFanSpeed(i)).Select(val => (double?)val).ToList(),
            BackgroundColor = colors[0],
            BorderColor = colors[0],
            BorderWidth = 2,
            HoverBorderWidth = 4,
            PointRadius = [0,],
        };

        datasets.Add(dataset1);

        decimal? latestAggregate = readingStore.GetLatest(TemperatureWrapper.AGGREGATE_READING_NAME);

        if (latestAggregate is not null)
        {
            LineChartDataset dataset2 = new()
            {
                Label = "Current Temperature",
                Data = MakeBaseGraph().Select<decimal, double?>(
                    refVal =>
                    {
                        if (Math.Abs(refVal - latestAggregate.Value) > GRAPH_RESOLUTION)
                        {
                            return null;
                        }

                        if (refVal < latestAggregate.Value)
                        {
                            return (double)GRAPH_Y_START;
                        }

                        return (double)GRAPH_Y_END;
                    }
                ).ToList(),
                BackgroundColor = colors[2],
                BorderColor = colors[2],
                BorderWidth = 2,
                HoverBorderWidth = 4,
                PointRadius = [0,],
            };

            datasets.Add(dataset2);
        }

        return datasets;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task RefreshGraphAsync()
    {
        List<IChartDataset>? dataSets = GenerateDataSets();
        chartData = GenerateChartData(dataSets);
        await lineChart.UpdateAsync(chartData, lineChartOptions);
    }

}