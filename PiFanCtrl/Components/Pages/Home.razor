@page "/"
@using PiFanCtrl.Services

<PageTitle>Home</PageTitle>

<div class="container-fluid overflow-x-auto">
    <LineChart @ref="lineChart" Width="800"/>
</div>

@code {
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    private int offThreshold = 30;
    private int panicFrom = 80;
    private decimal multiplier = 1.2m;

    private async Task<decimal> CalculateFanSpeed(decimal temperature)
    {
        if (temperature < offThreshold)
        {
            return 0;
        }

        if (temperature >= panicFrom)
        {
            return 100;
        }

        return Math.Min(val1: 100, temperature * multiplier);
    }

    protected async override Task OnInitializedAsync()
    {
        string[] colors = ColorUtility.CategoricalTwelveColors;

        List<string> labels = Enumerable.Range(start: 0, count: 100).Select(num => num).Select(val => val.ToString()).ToList();
        List<IChartDataset>? datasets = new();

        LineChartDataset? dataset1 = new()
        {
            Label = "Temperature",
            Data = (await Task.WhenAll(Enumerable.Range(start: 0, count: 100).Select(num => num).Select(i => CalculateFanSpeed(i)))).Select(val => (double?)val).ToList(),
            BackgroundColor = colors[0],
            BorderColor = colors[0],
            BorderWidth = 2,
            HoverBorderWidth = 4,
        };

        datasets.Add(dataset1);

        chartData = new() { Labels = labels, Datasets = datasets, };

        lineChartOptions = new();
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new() { Mode = InteractionMode.Index, };

        lineChartOptions.Scales.X!.Title = new() { Text = "Temperature", Display = true, };
        lineChartOptions.Scales.Y!.Title = new() { Text = "Fan Speed (%)", Display = true, };

        lineChartOptions.Plugins.Title!.Text = "Temperature to Speed Mapping";
        lineChartOptions.Plugins.Title.Display = true;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

}