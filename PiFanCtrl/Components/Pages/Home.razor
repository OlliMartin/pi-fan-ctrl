@page "/"
@using PiFanCtrl.Services
@using PiFanCtrl.Services.Stores
@using PiFanCtrl.Services.Temperature
@inject FanSpeedCalculator calculator
@inject SlidingReadingStore readingStore
@inject DummyTemperatureSensor tempSensor
@inject NavigationManager navigationManager

<PageTitle>Home</PageTitle>

<div class="container-fluid overflow-x-auto">
    <LineChart @ref="lineChart" Width="800"/>

    <EditForm Model="Model" OnValidSubmit="SubmitAsync" FormName="Simulation">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <InputNumber @bind-Value="Model!.Temperature" min="0" max="120"/>

        <button type="submit">Submit</button>
    </EditForm>

    <button @onclick="Reset">Reset</button>
</div>

@code {
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    protected async override Task OnInitializedAsync()
    {
        string[] colors = ColorUtility.CategoricalTwelveColors;

        List<string> labels = Enumerable.Range(start: 0, count: 100).Select(num => num).Select(val => val.ToString()).ToList();
        List<IChartDataset> datasets = new();

        LineChartDataset dataset1 = new()
        {
            Label = "Fan Speed (%)",
            Data = Enumerable.Range(start: 0, count: 100).Select(num => num).Select(i => calculator.CalculateFanSpeed(i)).Select(val => (double?)val).ToList(),
            BackgroundColor = colors[0],
            BorderColor = colors[0],
            BorderWidth = 2,
            HoverBorderWidth = 4,
            PointRadius = [0,],
        };

        datasets.Add(dataset1);

        decimal? latestAggregate = readingStore.GetLatest(TemperatureWrapper.AGGREGATE_READING_NAME);

        if (latestAggregate is not null)
        {
            LineChartDataset dataset2 = new()
            {
                Label = "Current Temperature",
                Data = Enumerable.Range(start: 0, count: 100).Select(_ => (double?)latestAggregate).ToList(),
                BackgroundColor = colors[2],
                BorderColor = colors[2],
                BorderWidth = 2,
                HoverBorderWidth = 4,
                PointRadius = [0,],
            };

            datasets.Add(dataset2);
        }

        chartData = new() { Labels = labels, Datasets = datasets, };

        lineChartOptions = new();
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new() { Mode = InteractionMode.Index, };
        
        lineChartOptions.Scales.X!.Title = new() { Text = "Temperature", Display = true, };
        lineChartOptions.Scales.Y!.Title = new() { Text = "Fan Speed (%)", Display = true, };

        lineChartOptions.Plugins.Title!.Text = "Temperature to Speed Mapping";
        lineChartOptions.Plugins.Title.Display = true;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public TestModel Model { get; set; } = null!;

    public async Task SubmitAsync()
    {
        if (Model?.Temperature is not null)
        {
            tempSensor.Simulate(Model.Temperature.Value);
            navigationManager.NavigateTo("/", forceLoad: true);
        }
    }

    public async Task Reset()
    {
        tempSensor.Reset();
        navigationManager.NavigateTo("/", forceLoad: true);
    }

    protected override void OnInitialized() =>
        Model ??= new() { };

    public class TestModel
    {
        public decimal? Temperature { get; set; }
    }

}